.pop-up {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 220;
  background-color: rgba($color-black, 0.85);
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s;

  &__content {
    @include center-vertical-horizontal;
    transform: translate(-50%, -50%) scale(0.2);
    width: 60%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, $alpha: 0.2);
    border-radius: 3px;
    display: table;
    // I thing that there is no need of overflow: hidden and opacity: 0 cause this rules are inherited from parent element - pop-up class.
    // overflow: hidden;
    // opacity: 0;
    transition: all 0.3s 0.2s;

    @include respond-to('tab-land') {
      width: 80%;
    }

    @include respond-to('phone') {
      display: block;
    }
  }

  &__left {
    width: 33.33333%;
    display: table-cell;

    @include respond-to('tab-port') {
      vertical-align: middle;
    }

    @include respond-to('phone') {
       display: flex;
      width: 50%;
    }
  }

  &__right {
    width: 66, 66666%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem;

    @include respond-to('phone') {
      width: 50%;
      padding: 2rem 3rem;
    }
  }

  &__image {
    display: block;
    width: 100%;
  }

  &__text {
    font-size: 1.4rem;
    column-count: 2;
    -webkit-column-gap: 4rem;
    column-gap: 4rem;
    column-rule: 1px solid $color-grey-light-2;

    @include respond-to('phone') {
      column-count: 1;
    }
  }

  // Opens pop-up
  &:target {
    opacity: 1;
    visibility: visible;
  }

  &:target &__content {
    // opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  &__btn {
    margin-top: 3rem;

    @include respond-to('phone') {
      text-align: center;
    }
  }

  &__close {
    &:link,
    &:visited {
      color: $color-grey-dark-1;
      position: absolute;
      top: 2.5rem;
      right: 3.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      line-height: 1;
    }

    &:hover {
      color: $color-primary;
    }
  }
}
